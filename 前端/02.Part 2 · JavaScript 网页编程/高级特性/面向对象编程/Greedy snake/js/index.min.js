(function (window, undefined) { var Tools = { getRandomIntInclusive: function (min, max) { min = Math.ceil(min); max = Math.floor(max); return Math.floor(Math.random() * (max - min + 1)) + min }, getRandomColor: function () { var r = this.getRandomIntInclusive(0, 255); var g = this.getRandomIntInclusive(0, 255); var b = this.getRandomIntInclusive(0, 255); return "rgb(" + r + ", " + g + ", " + b + ")" } }; window.Tools = Tools })(window, undefined); (function (window, undefined) { function Food(parent, options) { this.parent = parent; options = options instanceof Object ? options : {}; this.width = options.width || 20; this.height = options.height || 20; this.x = options.x || 0; this.y = options.y || 0; this.backgroundColor = options.backgroundColor || "rgb(166, 226, 46)"; this.elements = [] } Food.prototype.render = function () { var e = document.createElement('div'); this.x = this.getRandomIntInclusive(this.parent.offsetWidth); this.y = this.getRandomIntInclusive(this.parent.offsetHeight); e.style.position = "absolute"; e.style.width = this.width + "px"; e.style.height = this.height + "px"; e.style.left = this.x + "px"; e.style.top = this.y + "px"; e.style.backgroundColor = this.backgroundColor; this.parent.appendChild(e); this.elements.push(e) }; Food.prototype.remove = function (i) { this.parent.removeChild(this.elements[i]); this.elements.splice(i, 1) }; Food.prototype.getRandomIntInclusive = function (max) { return Math.ceil((Tools.getRandomIntInclusive(0, max) / 20) - 1) * 20 }; Food.prototype.positionRandom = function (e) { this.x = Math.ceil((Tools.getRandomIntInclusive(0, this.parent.offsetWidth) / 20) - 1) * 20; this.y = Math.ceil((Tools.getRandomIntInclusive(0, this.parent.offsetHeight) / 20) - 1) * 20; e.style.left = this.x + "px"; e.style.top = this.y + "px" }; window.Food = Food })(window, undefined); (function (window, undefined) { function Snake(parent, options) { this.parent = parent; options = options || {}; this.width = 20; this.height = 20; this.body = [{ x: 3, y: 2, color: "red" }, { x: 2, y: 2, color: "blue" }, { x: 1, y: 2, color: "blue" }]; this.direction = "right"; this.elements = [] } Snake.prototype.render = function () { for (let index = 0, len = this.body.length; index < len; index++) { var piece = this.body[index]; var ele = document.createElement('div'); ele.style.position = "absolute"; ele.style.width = this.width + "px"; ele.style.height = this.height + "px"; ele.style.backgroundColor = piece.color; ele.style.left = piece.x * this.width + "px"; ele.style.top = piece.y * this.height + "px"; this.parent.appendChild(ele); this.elements.push(ele) } }; Snake.prototype.move = function () { for (let index = this.body.length - 1; index > 0; index--) { this.body[index].x = this.body[index - 1].x; this.body[index].y = this.body[index - 1].y } var head = this.body[0]; switch (this.direction) { case "right": head.x += 1; break; case "left": head.x -= 1; break; case "up": head.y -= 1; break; case "down": head.y += 1; break } }; Snake.prototype.remove = function (map) { for (let index = this.elements.length - 1; index >= 0; index--) { map.removeChild(this.elements[index]) } this.elements = [] }; Snake.prototype.changePosition = function () { this.ele.style.left = this.x + "px"; this.ele.style.top = this.y + "px" }; window.Snake = Snake })(window, undefined); (function (window, undefined) { var that; var interval = 100; function Game(map) { this.map = map; this.food = new Food(map); this.snake = new Snake(map); that = this } Game.prototype.start = function () { this.food.render(); this.food.render(); this.food.render(); this.food.render(); this.snake.render(); function runSnake() { var timer = setInterval(function () { that.snake.move(); that.snake.remove(this.map); that.snake.render(); var hx = that.snake.body[0].x * that.snake.width; var hy = that.snake.body[0].y * that.snake.height; for (let index = 0; index < that.food.elements.length; index++) { var foodX = parseFloat(that.food.elements[index].style.left); var foodY = parseFloat(that.food.elements[index].style.top); if (hx == foodX && hy == foodY) { that.food.remove(index); that.food.render(); var last = that.snake.body[that.snake.body.length - 1]; that.snake.body.push({ x: last.x, y: last.y, color: last.color }) } } var maxX = that.map.offsetWidth / that.snake.width; var maxY = that.map.offsetHeight / that.snake.height; var headX = that.snake.body[0].x; var headY = that.snake.body[0].y; if (headX < 0 || headX >= maxX || headY < 0 || headY >= maxY) { clearInterval(timer); alert("GG") } }, interval) } runSnake(); function bindKey() { document.onkeydown = function (e) { switch (e.keyCode) { case 37: that.snake.direction = "left"; break; case 38: that.snake.direction = "up"; break; case 39: that.snake.direction = "right"; break; case 40: that.snake.direction = "down"; break } } } bindKey() }; window.Game = Game })(window, undefined); (function (window, undefined) { var map = document.getElementById("map"); var game = new Game(map); game.start() })(window, undefined);